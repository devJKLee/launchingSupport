var fs = require('fs')
var os = require('os')
var path = require('path')
var crypto = require('crypto')
var mkdirp = require('mkdirp')

function getFilename(req, file, cb) {
    crypto.pseudoRandomBytes(16, function (err, raw) {
        cb(err, err ? undefined : raw.toString('hex'))
    })
}

function getDestination(req, file, cb) {
    cb(null, os.tmpdir())
}

function DiskStorage(opts) {
    this.getFilename = (opts.filename || getFilename)

    if (typeof opts.destination === 'string') {
        mkdirp.sync(opts.destination)
        this.getDestination = function ($0, $1, cb) {
            cb(null, opts.destination)
        }
    } else {
        this.getDestination = (opts.destination || getDestination)
    }
}

DiskStorage.prototype._handleFile = function _handleFile(req, file, cb) {
    var that = this
    var prevSize = 0;

    that.getDestination(req, file, function (err, destination) {
        if (err) return cb(err)

        that.getFilename(req, file, function (err, filename) {
            if (err) return cb(err)

            var finalPath = path.join(destination, filename)
            var outStream = fs.createWriteStream(finalPath)

            file.stream.pipe(outStream)

            /**
             * 클라이언트로부터 전달받은 파일의 원래 크기
             * @type {*|number}
             */
            var originalSize = req.body.fileSize;

            /**
             * 파일 업로드 요청이 들어온 경우, 파일의 현재 크기와 원래 크기를 비교해서,
             * 업로드 과정에서의 에러 발생 유무를 체크한다. 
             * (에러가 발생한 경우는, 파일 업로드가 중간에 끊어졌기 때문에, 파일의 원래 크기보다 현재 크기가 작다)
             * @type {number | Object}
             */
            let fileCheckTimer = setInterval(function(){
                const stats = fs.statSync(finalPath);
                const fileSizeInBytes = stats.size;
                
                // 현재 크기와 원래 크기가 동일한 경우, 업로드가 정상적으로 종료된 상태
                if(fileSizeInBytes == originalSize)
                {
                    clearInterval(fileCheckTimer);
                    return;
                }
                // 1초 동안 파일의 크기 변경이 없는 경우, 업로드 과정에서 에러 발생
                else if(prevSize == fileSizeInBytes)
                {
                    clearInterval(fileCheckTimer);
                    outStream.end(function(){
                        fs.unlinkSync(finalPath);
                    });
                    return;
                }
                prevSize = fileSizeInBytes;
            }, 1000);

            outStream.on('error', cb)
            outStream.on('finish', function () {
                cb(null, {
                    destination: destination,
                    filename   : filename,
                    path       : finalPath,
                    size       : outStream.bytesWritten
                })
            })
        })
    })
}

DiskStorage.prototype._removeFile = function _removeFile(req, file, cb) {
    var path = file.path

    delete file.destination
    delete file.filename
    delete file.path

    fs.unlink(path, cb)
}

module.exports = function (opts) {
    return new DiskStorage(opts)
}
